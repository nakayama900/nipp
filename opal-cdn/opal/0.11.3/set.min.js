Opal.modules.set=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?rhs>lhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?rhs>=lhs:lhs["$<="](rhs)}var $nesting=(Opal.top,[]),nil=Opal.nil,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$send=Opal.send,$module=Opal.module;return Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$call","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$-","$enum_for","$[]","$<<","$replace","$delete","$select","$each_key","$to_proc","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$keys"]),function($base,$super,$parent_nesting){function $Set(){}var TMP_Set_$$_1,TMP_Set_initialize_2,TMP_Set_dup_4,TMP_Set_$_5,TMP_Set_inspect_6,TMP_Set_$eq$eq_8,TMP_Set_add_9,TMP_Set_classify_10,TMP_Set_collect$B_13,TMP_Set_delete_15,TMP_Set_delete$q_16,TMP_Set_delete_if_17,TMP_Set_add$q_20,TMP_Set_each_21,TMP_Set_empty$q_22,TMP_Set_eql$q_24,TMP_Set_clear_25,TMP_Set_include$q_26,TMP_Set_merge_28,TMP_Set_replace_29,TMP_Set_size_30,TMP_Set_subtract_32,TMP_Set_$_33,TMP_Set_superset$q_35,TMP_Set_proper_superset$q_37,TMP_Set_subset$q_39,TMP_Set_proper_subset$q_41,TMP_Set_to_a_42,self=$Set=$klass($base,$super,"Set",$Set),def=self.$$proto,$nesting=[self].concat($parent_nesting);return def.hash=nil,self.$include(Opal.const_get_relative($nesting,"Enumerable")),Opal.defs(self,"$[]",TMP_Set_$$_1=function(){var ary,self=this,$args_len=arguments.length,$rest_len=$args_len-0;0>$rest_len&&($rest_len=0),ary=new Array($rest_len);for(var $arg_idx=0;$args_len>$arg_idx;$arg_idx++)ary[$arg_idx-0]=arguments[$arg_idx];return self.$new(ary)},TMP_Set_$$_1.$$arity=-1),Opal.defn(self,"$initialize",TMP_Set_initialize_2=function(enum$){var TMP_3,self=this,$iter=TMP_Set_initialize_2.$$p,block=$iter||nil;return null==enum$&&(enum$=nil),$iter&&(TMP_Set_initialize_2.$$p=null),self.hash=Opal.const_get_relative($nesting,"Hash").$new(),$truthy(enum$["$nil?"]())?nil:($truthy(Opal.const_get_relative($nesting,"Enumerable")["$==="](enum$))||self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],(TMP_3=function(item){var self=TMP_3.$$s||this;return null==item&&(item=nil),self.$add(block.$call(item))},TMP_3.$$s=self,TMP_3.$$arity=1,TMP_3)):self.$merge(enum$))},TMP_Set_initialize_2.$$arity=-1),Opal.defn(self,"$dup",TMP_Set_dup_4=function(){var self=this,result=nil;return result=self.$class().$new(),result.$merge(self)},TMP_Set_dup_4.$$arity=0),Opal.defn(self,"$-",TMP_Set_$_5=function(enum$){var self=this;return $truthy(enum$["$respond_to?"]("each"))||self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be enumerable"),self.$dup().$subtract(enum$)},TMP_Set_$_5.$$arity=1),Opal.alias(self,"difference","-"),Opal.defn(self,"$inspect",TMP_Set_inspect_6=function(){var self=this;return"#<Set: {"+self.$to_a().$join(",")+"}>"},TMP_Set_inspect_6.$$arity=0),Opal.defn(self,"$==",TMP_Set_$eq$eq_8=function(other){var $a,TMP_7,self=this;return $truthy(self["$equal?"](other))?!0:$truthy(other["$instance_of?"](self.$class()))?self.hash["$=="](other.$instance_variable_get("@hash")):$truthy($truthy($a=other["$is_a?"](Opal.const_get_relative($nesting,"Set")))?self.$size()["$=="](other.$size()):$a)?$send(other,"all?",[],(TMP_7=function(o){var self=TMP_7.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)},TMP_7.$$s=self,TMP_7.$$arity=1,TMP_7)):!1},TMP_Set_$eq$eq_8.$$arity=1),Opal.defn(self,"$add",TMP_Set_add_9=function(o){var self=this,$writer=nil;return $writer=[o,!0],$send(self.hash,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],self},TMP_Set_add_9.$$arity=1),Opal.alias(self,"<<","add"),Opal.defn(self,"$classify",TMP_Set_classify_10=function(){var TMP_11,TMP_12,self=this,$iter=TMP_Set_classify_10.$$p,block=$iter||nil,result=nil;return $iter&&(TMP_Set_classify_10.$$p=null),block===nil?self.$enum_for("classify"):(result=$send(Opal.const_get_relative($nesting,"Hash"),"new",[],(TMP_11=function(h,k){var self=TMP_11.$$s||this,$writer=nil;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,self.$class().$new()],$send(h,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},TMP_11.$$s=self,TMP_11.$$arity=2,TMP_11)),$send(self,"each",[],(TMP_12=function(item){TMP_12.$$s||this;return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)},TMP_12.$$s=self,TMP_12.$$arity=1,TMP_12)),result)},TMP_Set_classify_10.$$arity=0),Opal.defn(self,"$collect!",TMP_Set_collect$B_13=function(){var TMP_14,self=this,$iter=TMP_Set_collect$B_13.$$p,block=$iter||nil,result=nil;return $iter&&(TMP_Set_collect$B_13.$$p=null),block===nil?self.$enum_for("collect!"):(result=self.$class().$new(),$send(self,"each",[],(TMP_14=function(item){TMP_14.$$s||this;return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))},TMP_14.$$s=self,TMP_14.$$arity=1,TMP_14)),self.$replace(result))},TMP_Set_collect$B_13.$$arity=0),Opal.alias(self,"map!","collect!"),Opal.defn(self,"$delete",TMP_Set_delete_15=function(o){var self=this;return self.hash.$delete(o),self},TMP_Set_delete_15.$$arity=1),Opal.defn(self,"$delete?",TMP_Set_delete$q_16=function(o){var self=this;return $truthy(self["$include?"](o))?(self.$delete(o),self):nil},TMP_Set_delete$q_16.$$arity=1),Opal.defn(self,"$delete_if",TMP_Set_delete_if_17=function(){try{var $a,TMP_18,TMP_19,self=this,$iter=TMP_Set_delete_if_17.$$p,$yield=$iter||nil;return $iter&&(TMP_Set_delete_if_17.$$p=null),$truthy($a=$yield!==nil)?$a:Opal.ret(self.$enum_for("delete_if")),$send($send(self,"select",[],(TMP_18=function(o){TMP_18.$$s||this;return null==o&&(o=nil),Opal.yield1($yield,o)},TMP_18.$$s=self,TMP_18.$$arity=1,TMP_18)),"each",[],(TMP_19=function(o){var self=TMP_19.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)},TMP_19.$$s=self,TMP_19.$$arity=1,TMP_19)),self}catch($returner){if($returner===Opal.returner)return $returner.$v;throw $returner}},TMP_Set_delete_if_17.$$arity=0),Opal.defn(self,"$add?",TMP_Set_add$q_20=function(o){var self=this;return $truthy(self["$include?"](o))?nil:self.$add(o)},TMP_Set_add$q_20.$$arity=1),Opal.defn(self,"$each",TMP_Set_each_21=function(){var self=this,$iter=TMP_Set_each_21.$$p,block=$iter||nil;return $iter&&(TMP_Set_each_21.$$p=null),block===nil?self.$enum_for("each"):($send(self.hash,"each_key",[],block.$to_proc()),self)},TMP_Set_each_21.$$arity=0),Opal.defn(self,"$empty?",TMP_Set_empty$q_22=function(){var self=this;return self.hash["$empty?"]()},TMP_Set_empty$q_22.$$arity=0),Opal.defn(self,"$eql?",TMP_Set_eql$q_24=function(other){var TMP_23,self=this;return self.hash["$eql?"]($send(other,"instance_eval",[],(TMP_23=function(){var self=TMP_23.$$s||this;return null==self.hash&&(self.hash=nil),self.hash},TMP_23.$$s=self,TMP_23.$$arity=0,TMP_23)))},TMP_Set_eql$q_24.$$arity=1),Opal.defn(self,"$clear",TMP_Set_clear_25=function(){var self=this;return self.hash.$clear(),self},TMP_Set_clear_25.$$arity=0),Opal.defn(self,"$include?",TMP_Set_include$q_26=function(o){var self=this;return self.hash["$include?"](o)},TMP_Set_include$q_26.$$arity=1),Opal.alias(self,"member?","include?"),Opal.defn(self,"$merge",TMP_Set_merge_28=function(enum$){var TMP_27,self=this;return $send(enum$,"each",[],(TMP_27=function(item){var self=TMP_27.$$s||this;return null==item&&(item=nil),self.$add(item)},TMP_27.$$s=self,TMP_27.$$arity=1,TMP_27)),self},TMP_Set_merge_28.$$arity=1),Opal.defn(self,"$replace",TMP_Set_replace_29=function(enum$){var self=this;return self.$clear(),self.$merge(enum$),self},TMP_Set_replace_29.$$arity=1),Opal.defn(self,"$size",TMP_Set_size_30=function(){var self=this;return self.hash.$size()},TMP_Set_size_30.$$arity=0),Opal.alias(self,"length","size"),Opal.defn(self,"$subtract",TMP_Set_subtract_32=function(enum$){var TMP_31,self=this;return $send(enum$,"each",[],(TMP_31=function(item){var self=TMP_31.$$s||this;return null==item&&(item=nil),self.$delete(item)},TMP_31.$$s=self,TMP_31.$$arity=1,TMP_31)),self},TMP_Set_subtract_32.$$arity=1),Opal.defn(self,"$|",TMP_Set_$_33=function(enum$){var self=this;return $truthy(enum$["$respond_to?"]("each"))||self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be enumerable"),self.$dup().$merge(enum$)},TMP_Set_$_33.$$arity=1),Opal.defn(self,"$superset?",TMP_Set_superset$q_35=function(set){var $a,TMP_34,self=this;return $truthy($a=set["$is_a?"](Opal.const_get_relative($nesting,"Set")))?$a:self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_lt(self.$size(),set.$size()))?!1:$send(set,"all?",[],(TMP_34=function(o){var self=TMP_34.$$s||this;return null==o&&(o=nil),self["$include?"](o)},TMP_34.$$s=self,TMP_34.$$arity=1,TMP_34))},TMP_Set_superset$q_35.$$arity=1),Opal.alias(self,">=","superset?"),Opal.defn(self,"$proper_superset?",TMP_Set_proper_superset$q_37=function(set){var $a,TMP_36,self=this;return $truthy($a=set["$is_a?"](Opal.const_get_relative($nesting,"Set")))?$a:self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_le(self.$size(),set.$size()))?!1:$send(set,"all?",[],(TMP_36=function(o){var self=TMP_36.$$s||this;return null==o&&(o=nil),self["$include?"](o)},TMP_36.$$s=self,TMP_36.$$arity=1,TMP_36))},TMP_Set_proper_superset$q_37.$$arity=1),Opal.alias(self,">","proper_superset?"),Opal.defn(self,"$subset?",TMP_Set_subset$q_39=function(set){var $a,TMP_38,self=this;return $truthy($a=set["$is_a?"](Opal.const_get_relative($nesting,"Set")))?$a:self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_lt(set.$size(),self.$size()))?!1:$send(self,"all?",[],(TMP_38=function(o){TMP_38.$$s||this;return null==o&&(o=nil),set["$include?"](o)},TMP_38.$$s=self,TMP_38.$$arity=1,TMP_38))},TMP_Set_subset$q_39.$$arity=1),Opal.alias(self,"<=","subset?"),Opal.defn(self,"$proper_subset?",TMP_Set_proper_subset$q_41=function(set){var $a,TMP_40,self=this;return $truthy($a=set["$is_a?"](Opal.const_get_relative($nesting,"Set")))?$a:self.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_le(set.$size(),self.$size()))?!1:$send(self,"all?",[],(TMP_40=function(o){TMP_40.$$s||this;return null==o&&(o=nil),set["$include?"](o)},TMP_40.$$s=self,TMP_40.$$arity=1,TMP_40))},TMP_Set_proper_subset$q_41.$$arity=1),Opal.alias(self,"<","proper_subset?"),Opal.alias(self,"+","|"),Opal.alias(self,"union","|"),Opal.defn(self,"$to_a",TMP_Set_to_a_42=function(){var self=this;return self.hash.$keys()},TMP_Set_to_a_42.$$arity=0),nil&&"to_a"}($nesting[0],null,$nesting),function($base,$parent_nesting){var $Enumerable,TMP_Enumerable_to_set_43,self=$Enumerable=$module($base,"Enumerable"),$nesting=(self.$$proto,[self].concat($parent_nesting));Opal.defn(self,"$to_set",TMP_Enumerable_to_set_43=function(klass){var args,self=this,$iter=TMP_Enumerable_to_set_43.$$p,block=$iter||nil;null==klass&&(klass=Opal.const_get_relative($nesting,"Set"));var $args_len=arguments.length,$rest_len=$args_len-1;0>$rest_len&&($rest_len=0),args=new Array($rest_len);for(var $arg_idx=1;$args_len>$arg_idx;$arg_idx++)args[$arg_idx-1]=arguments[$arg_idx];return $iter&&(TMP_Enumerable_to_set_43.$$p=null),$send(klass,"new",[self].concat(Opal.to_a(args)),block.$to_proc())},TMP_Enumerable_to_set_43.$$arity=-1)}($nesting[0],$nesting)};